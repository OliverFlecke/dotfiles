[user]
	name = Oliver Fleckenstein
	email = oliverfl@live.dk
	useConfigOnly = true
[core]
	editor = nvim
	autocrlf = false
	attributesfile = ~/.gitattributes
	eol = lf
	pager = diff-so-fancy | less --tabs=4 -RFX

	# Usefull to monitor changes in a repo, but should be set on a repository level
	# fsmonitor = true
	# untrackedCache = true
	# git config core.fsmonitor true
	# git config core.untrackedCache true
[include]
	path = ~/.local.gitconfig
[init]
	defaultBranch = main
[color]
	status = always
	ui = true
[diff]
	tool = default-difftool
	algorithm = histogram
	colorMoved = plain
	mnemonicPrefix = true
	renames = true
[interative]
	# diffFilter = diff-so-fancy --patch [difftool "default-difftool"]
	cmd = code --wait --diff $LOCAL $REMOTE
[merge]
	tool = default-mergetool
	conflictstyle = zdiff3
[rebase]
	autoSquash = true
	autoStash = true
	updateRefs = true
[mergetool "default-mergetool"]
	cmd = code --wait $MERGED
[hub]
	protocol = https
[credential]
	helper = cache
[commit]
	gpgsign = true
	verbose = true
[gpg]
	program = gpg
[push]
	default = simple
	autoSetupRemote = true
	followTags = true
[pull]
	rebase = true
[fetch]
	prune = true
	pruneTags = true
	all = true
[branch]
	sort = -committerdate
[tag]
	sort = version:refname
[column]
	ui = auto
[help]
	autocorrect = prompt
[rerere]
	enable = true
	autoupdate = true
[interactive]
	diffFilter = diff-so-fancy --patch
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "diff"]
	meta = 11
	frag = magenta bold
	func = 146 bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[alias]
	co	 = checkout
	sw	 = switch
	cm	 = commit
	st	 = status
	br	 = branch
	last = log -n 1
	ldiff = diff HEAD~1 HEAD

	cmreset = commit --amend --reset-author --no-edit

	dl	 = diff HEAD^ HEAD
	di	 = "diff --word-diff=color --minimal --word-diff-regex='([0-9@A-Za-z]+|[^0-9@A-Za-z()]+|[()])'"
	pp	 = "!func(){ git pull && git push; };"
	pom  = pull origin master
	pomp = "!func(){ git pull origin master && git push; };"
	cmpp = "!func(){ git add -u && git commit -m $1 && git pull && git push; }; func"

	# Set the upstream of the current branch
	track = "!git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`"
	branch-name = rev-parse --abbrev-ref HEAD

	short-description = "!git config branch.$(git branch-name).description"
	description = "!git branch --edit-description $(git branch-name)"

	publish = "!git push -u origin $(git branch-name)"
	unpublish = "!git push origin :$(git branch-name)"

	ls-linear = log --pretty=format:'%Cred%h%Creset %Cgreen%>(16)%cr%Creset - %<(80,trunc)%s %<(30,trunc)%ae %C(yellow)%d%Creset' --abbrev-commit --date=relative
	ls = log --graph --pretty=format:'%Cred%h%Creset %Cgreen%>(16)%cr%Creset - %<(80,trunc)%s %<(30,trunc)%ae %C(yellow)%d%Creset' --abbrev-commit --date=relative
	ls-change = log --pretty=format:'- %<(80,trunc)%s%Creset' --abbrev-commit --date=relative --reverse main..HEAD

	# Command to help generate release notes
	ls-release = log --graph --pretty=format:'%s %C(yellow)%d%Creset' --abbrev-commit --date=relative --perl-regexp --author="^(?!dependabot)"

	change = "!func(){ git log --pretty=format:'- %<(80,trunc)%s%Creset' --abbrev-commit --date=relative --reverse $1..HEAD; }; func"

	vs	= !git ls $1..$(git branch-name)

	hide = update-index --assume-unchanged
	unhide = update-index --no-assume-unchanged
	hidden = ! git ls-files -v | grep '^h' | cut -c3-

	# Iterate through local branches and interactively delete them.
	delete-branches = "!func() { for b in $(git branch | grep -v main); do printf \"Delete $b? [y/n] \"; read -r choice; [ \"$choice\" = \"y\" ] && git branch -D $b; done }; func"
	clean-branches = "!git branch | grep -v main | xargs git branch -d"
	open = !git remote get-url origin | xargs open "$1"
	change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f"
	fame = !python -m gitfame
