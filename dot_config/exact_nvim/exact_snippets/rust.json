{
	// Place your snippets for rust here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"AoC template": {
		"prefix": "aoc",
		"body": [
			"use crate::solutions::{Solution, answer::Answer};",
			"",
			"pub struct Day$1;",
			"",
			"impl Solution for Day$1 {",
			"    fn solve_a(&self, _input: &str) -> Option<Answer> {",
			"        None",
			"    }",
			"",
			"    fn solve_b(&self, _input: &str) -> Option<Answer> {",
			"        None",
			"    }",
			"}",
			"",
			"#[cfg(test)]",
			"mod test {",
			"    use super::*;",
			"}"
		]
	},
	"Discord command": {
		"prefix": "discmd",
		"body": [
			"use async_trait::async_trait;",
			"use serenity::{",
			"    builder::CreateApplicationCommand,",
			"    model::prelude::interaction::application_command::ApplicationCommandInteraction,",
			"    prelude::Context,",
			"};",
			"",
			"use super::{CommandError, CommandHandler, context::DiscordContext, discord_app_command::DiscordAppCmd};",
			"",
			"pub struct $1Command;",
			"",
			"#[async_trait]",
			"impl CommandHandler for $1Command {",
			"    fn register(command: &mut CreateApplicationCommand) -> &mut CreateApplicationCommand {",
			"        todo!()",
			"    }",
			"",
			"async fn run<Ctx, Cmd>(ctx: &Ctx, command: &Cmd) -> CmdResult",
			"where",
			"   Ctx: DiscordContext + Send + Sync,",
			"   Cmd: DiscordAppCmd + 'static + Send + Sync,",
			"{",
			"        todo!()",
			"    }",
			"}"
		]
	}
}
